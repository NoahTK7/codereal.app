// Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Question {
    id Int @id @default(autoincrement())

    questionNum   Int             @unique
    title         String          @default("") @db.VarChar(128)
    startsAt      DateTime
    endsAt        DateTime
    description   String          @db.VarChar(512)
    funcSig       String          @db.VarChar(64)
    funcName      String          @db.VarChar(64)
    testCases     Json
    submissions   Submission[]
    startEvents   StartEvent[]
    questionStats QuestionStats[]

    @@index([id])
    @@index([startsAt, endsAt])
}

model Submission {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    authorId     String           @db.VarChar(256)
    question     Question         @relation(fields: [questionId], references: [id])
    questionId   Int
    runResult    SubmissionResult
    score        Int
    codeLength   Int
    solveTime    Int
    execTime     Int
    accuracy     Float
    errorMessage String?          @db.VarChar(1024)
    code         String           @db.VarChar(512)
    executionId  String           @db.VarChar(64)

    @@index([id])
    @@index([questionId, authorId])
}

enum SubmissionResult {
    CORRECT
    INCORRECT
    ERROR
    TIMEOUT
    UNKNOWN
}

model StartEvent {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    authorId   String   @db.VarChar(256)
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int

    @@index([questionId, authorId])
}

model QuestionStats {
    id        Int      @id @default(autoincrement())
    updatedAt DateTime @default(now())

    question       Question @relation(fields: [questionId], references: [id])
    questionId     Int      @unique
    top5Scores     Json
    numSubmissions Int

    @@index([questionId])
}

model UserStats {
    id        Int      @id @default(autoincrement())
    updatedAt DateTime @default(now())

    userId         String @unique @db.VarChar(256)
    topScore       Int
    avgScore       Float
    numSubmissions Int
    // improvement: current streak (consecutive submissions)

    @@index([userId])
}
